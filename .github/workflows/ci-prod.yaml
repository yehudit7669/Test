name: Prod - Build and Push to GCR

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  SERVICE: wizer-fe
  REGISTRY: gcr.io

jobs:
  setup-build-publish-deploy:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    
    permissions:
      contents: 'read'
      id-token: 'write'

    name: Setup, Build, and Publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Slack Notify
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |-
          npm install

      - name: Run prettier
        run: |-
          npm run prettify
      
      - name: Run eslint
        run: |-
          npm run lint
      
      - name: Run tsc
        working-directory: src
        run: |-
          tsc

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker image
      - name: Build
        run: |
          docker build -t $REGISTRY/$GCP_PROJECT_ID/$SERVICE:${GITHUB_SHA} .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY/$GCP_PROJECT_ID/$SERVICE:${GITHUB_SHA}

      - id: 'deploy'
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{env.SERVICE}}-prod
          image: ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: 'Use output'
        run: 'curl "${{ steps.deploy.outputs.url }}"'